using Application.DTOs;
using Core.Entities;
using Infrastructure.Data;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ScheduleController : ControllerBase
    {
        private readonly AppDbContext _context;
        public ScheduleController(AppDbContext context)
        {
            _context = context;
        }
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Schedule>>> GetRequests()
        {
            return await _context.Schedule.ToListAsync();
        }

        [HttpGet("user/{userId}")] // Changed route to be more descriptive
        public async Task<ActionResult<Schedule>> GetScheduleByUserId(string userId)
        {
            // Optional: Basic input validation
            if (string.IsNullOrWhiteSpace(userId))
            {
                return BadRequest("User ID cannot be empty.");
            }

            // Query the database for a schedule matching the UserId
            // Use FirstOrDefaultAsync to find the first match or return null if none found.
            // Make sure 'UserId' matches the actual property name on your Schedule entity.
            var schedule = await _context.Schedule
                                       .FirstOrDefaultAsync(s => s.UserId == userId); // <-- The key change is here

            if (schedule == null)
            {
                // Return NotFound if no schedule is associated with this user ID
                return NotFound($"No schedule found for user ID '{userId}'.");
            }

            // Return the found schedule
            return Ok(schedule); // Using Ok() is slightly more explicit
        }
        [HttpPost]
        public async Task<ActionResult<Schedule>> CreateSchedule(ScheduleDto scheduleDto)
        {
            // Basic validation (example)
            if (!Guid.TryParse(scheduleDto.UserId, out _))
            {
                return BadRequest("Invalid UserId format.");
            }

            var schedule = new Schedule
            {
                // ScheduleId will likely be generated by the DB, so don't set it from DTO if it's an auto-incrementing PK
                // ScheduleId = scheduleDto.ScheduleId,
                UserId = scheduleDto.UserId,
                StartDate = scheduleDto.StartDate, // Consider parsing/validating these strings
                EndDate = scheduleDto.EndDate,     // Consider parsing/validating these strings
                BreakTime = scheduleDto.BreakTime  // Consider parsing/validating these strings
            };

            _context.Schedule.Add(schedule);
            await _context.SaveChangesAsync();

            // This line requires the GetScheduleByUserId method below
            return CreatedAtAction(nameof(GetScheduleByUserId), new { id = schedule.ScheduleId }, schedule);
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> UpdateSchedule(int id, ScheduleDto scheduleDto)
        {
            if (id != scheduleDto.ScheduleId)
            {
                return BadRequest();
            }

            var schedule = await _context.Schedule.FindAsync(id);

            if (schedule == null)
            {
                return NotFound();
            }

            schedule.UserId = scheduleDto.UserId;
            schedule.StartDate = scheduleDto.StartDate;
            schedule.EndDate = scheduleDto.EndDate;
            schedule.BreakTime = scheduleDto.BreakTime;

            _context.Entry(schedule).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ScheduleExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteSchedule(int id)
        {
            var schedule = await _context.Schedule.FindAsync(id);

            if (schedule == null)
            {
                return NotFound();
            }

            _context.Schedule.Remove(schedule);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool ScheduleExists(int id)
        {
            return _context.Schedule.Any(e => e.ScheduleId == id);
        }
    }
}
